#
#(1) 각 열별로 결측값이 몇 개인지 출력하시오.
for ( i in 1:ncol( ds ) ) {
cat( 'column [ ', i, ' ] : ', sum( is.na( ds[ , i ] ) ), '\n' )
}
#
# day7_answer.R
#
# 7일차 Data 정제 / Data 가공 분석 실습
#
#문1)
#다음과 같이 결측값이 포함된 데이터셋 ds를 생성한 후, 다음 문제를 해결
#하기 위한 R 코드를 작성하시오.
#
ds <- state.x77
ds[2,3] <- NA; ds[3,1] <- NA; ds[2,4] <- NA; ds[4,3] <- NA
#
#(1) 각 열별로 결측값이 몇 개인지 출력하시오.
for ( i in 1:ncol( ds ) ) {
cat( 'column [ ', i, ' ] : ', sum( is.na( ds[ , i ] ) ), '\n' )
}
cat( colnames(ds)[i], "\t",
sum(ds.na),"\n" )
for( i in 1:ncol(ds)){
ds.na <- is.na(ds[,i])
cat( colnames(ds)[i], "\t",
sum(ds.na),"\n" )
}
#(3) 결측값이 포함된 행은 몇 개인지 출력하시오.
cnt <- 0
for ( i in 1:nrow( ds ) ) {
if ( sum( is.na( ds[ i, ] ) ) > 0 ) {
cnt <- cnt + 1
}
}
cnt
#(3) 결측값이 포함된 행은 몇 개인지 출력하시오.
sum( rowSums( is.na(ds) ) > 0 )
boxplot( st ) # : Populationm, Income, Area만 특이값(이상치) 있음.
st <- data.frame(state.x77)
boxplot( st ) # : Populationm, Income, Area만 특이값(이상치) 있음.
state <- data.frame(state.x77)
state %>% arrange( Population )
install.packages("dplyr")
library(dplyr)
state %>% arrange( Population )
state %>%
arrange( Population ) %>%
select( Population )
#(3) Illiteracy(문맹률)가 낮은 상위 10개 주의 이름과 문맹률을 출력하시오.
state %>%
mutate( city = rownames(state) ) %>%
arrange( Illiteracy ) %>%
select( city, Income) %>%
head(10)
tmp <- state.x77[ order( state.x77[ , 'Illiteracy' ] ), ]
tmp[ 1:10, 'Illiteracy' ]
tmp <- state.x77[ order( desc(state.x77[ , 'Illiteracy' ] ) ), ]
tmp[ 1:10, 'Illiteracy' ]
tmp <- state.x77[ order( state.x77[ , 'Illiteracy' ] ) , ]
#(1) mtcars 데이터셋을 gear(기어)의 개수에 따라 그룹을 나누어 mt.gear에 저장하시오.
#(단, split() 함수를 사용)
mt.gear <- split(mtcars, mtcars$gear)
mt.gear
#(2) mt.gear에서 gear(기어)의 개수가 4인 그룹의 데이터를 출력하시오.
#str(mt.gear); summary(mt.gear)
mt.gear$`4`
mtcars %>%
filter( wt >= 1.5 & wt <= 3.0 )
#문6)
#다음의 문제를 해결하기 위한 R코드를 작성하시오.
#
#다음과 같이 데이터프레임 authors와 books를 생성하고 authors와 books의 내
#용을 출력하시오.
#
authors <- data.frame( surname = c( "Twein", "Venables", "Tierney", "Ripley", "McNeil" ),
nationality = c( "US", "Australia", "US", "UK", "Australia" ),
retired = c( "yes", rep( "no", 4 ) ) )
books <- data.frame( name = c( "Johns", "Venables", "Tierney", "Ripley", "Ripley", "McNeil" ),
title = c( "Exploratory Data Analysis",
"Modern Applied Statistics ...",
"LISP-STAT",
"Spatial Statistics", "Stochastic Simulation",
"Interactive Data Analysis" ),
other.author = c( NA, "Ripley", NA, NA, NA, NA ) )
authors
books
#(4) surname과 other.author를 공통 열로 하여 authors와 books를 병합하여 출력하
#시오.
merge( authors, books, by.x = c( 'surname' ), by.y = c( 'other.author' ) )
#(4) surname과 other.author를 "공통 열로 하여" authors와 books를 병합하여 출력하시오.
merge( authors, books, by.x = c("surname"), by.y = c("name"), all = T)
merge( authors, books, by.x = c( 'surname' ), by.y = c( 'other.author' ) )
myds <- BostonHousing[, c("crim", "rm","dis","tax","medv") ]
# 0단계 : 문제 정의
# 1단계 : 분석 대상 데이터셋 준비
#         BostonHousing 데이터셋 (mlbench pac.)
install.packages( "mlbench" )
library( mlbench )
data( "BostonHousing" )
View(BostonHousing)
myds <- BostonHousing[, c("crim", "rm","dis","tax","medv") ]
grp <- factor(grp)
grp <- factor( grp, levels = c( "H","M","L" ) ) # 내가 원하는 레벨 순서대로 정한 것.
myds <- data.frame( myds, grp ) #myds에 grp(파생변수)가 추가된 dataframe
head(myds)
# 3단계 : 데이터셋의 형태와 기본적인 내용 파악
str(myds)
head(myds)
table(myds$grp)
par( mfrow = c(2,3) )
for ( i in 1:5 ){
hist( myds[,1], main = colnames( myds )[i],
col = "yellow")
}
par( mfrow  = c(1,1))
par( mfrow = c(2,3) )
for ( i in 1:5 ){
boxplot( myds[,1], main = colnames( myds )[i])
}
par( mfrow  = c(1,1))
# 6단계 : 그룹별 관측값 분포 확인
boxplot( myds$crim ~ myds$grp,
main = "1인당 범죄율")
boxplot( myds$rm ~ myds$grp,
main = "방의 개수")
par( mfrow  = c(1,1))
# 6단계 : 그룹별 관측값 분포 확인
boxplot( myds$crim ~ myds$grp,
main = "1인당 범죄율")
# 7단계 : 다중 산점도를 통한 변수 간 상관 관계 확인
pairs( myds[, -6]) # 6번째 변수는 생략. <- 왜? : factor 타입이니까.
# 8 단계 : 그룹 정보를 포함한 변수 간 상간관계 확인
point <- as.integer( myds$grp )
color <- c("red","green","blue")
pairs( myds[,-6], pch = point,
col = color[ point ])
# 9단계 : 변수 간 상관계수 확인
cor( myds[ , -6 ] )cxv
# 7단계 : 다중 산점도를 통한 변수 간 상관 관계 확인
pairs( myds[, -6]) # 6번째 변수는 생략. <- 왜? : factor 타입이니까.
myds
# 9단계 : 변수 간 상관계수 확인
cor( myds[ , -6 ] )
# 8 단계 : 그룹 정보를 포함한 변수 간 상간관계 확인
point <- as.integer( myds$grp )
color <- c("red","green","blue")
pairs( myds[,-6], pch = point,
col = color[ point ])
data( "BostonHousing" )
class(BostonHousing )
dim( BostonHousing )
str( BostonHousing )
head( BostonHousing )
tail( BostonHousing )
myds <- BostonHousing[, c("crim", "rm","dis","tax","medv") ]
myds
# 2단계 : 파생변수 추가 : grp 변수 추가(주택가격 상,중,하 표현)
grp <- c()
for ( i in 1:nrow( myds ) ) {
if ( myds$medv[ i ] >= 25.0 ){
grp[i] <- 'H'
} else if ( myds$medv[ i ] <= 17.0 ){
grp[ i ] <- 'L'
} else{
grp[ i ] <- 'M'
}
}
grp <- factor(grp)
grp <- factor( grp, levels = c( "H","M","L" ) ) # 내가 원하는 레벨 순서대로 정한 것.
myds <- data.frame( myds, grp ) #myds에 grp(파생변수)가 추가된 dataframe
head(myds)
# 3단계 : 데이터셋의 형태와 기본적인 내용 파악
str(myds)
head(myds)
table(myds$grp)
par( mfrow = c(2,3) )
for ( i in 1:5 ){
hist( myds[,1], main = colnames( myds )[i],
col = "yellow")
}
par( mfrow  = c(1,1))
par( mfrow = c(2,3) )
for ( i in 1:5 ){
boxplot( myds[,1], main = colnames( myds )[i])
}
par( mfrow  = c(1,1))
# 6단계 : 그룹별 관측값 분포 확인
boxplot( myds$crim ~ myds$grp,
main = "1인당 범죄율")
myds
# 6단계 : 그룹별 관측값 분포 확인
boxplot( myds$crim ~ myds$grp,
main = "1인당 범죄율")
boxplot( myds$rm ~ myds$grp,
main = "방의 개수")
# 7단계 : 다중 산점도를 통한 변수 간 상관 관계 확인
pairs( myds[, -6]) # 6번째 변수는 생략. <- 왜? : factor 타입이니까.
# 8 단계 : 그룹 정보를 포함한 변수 간 상간관계 확인
point <- as.integer( myds$grp )
plot( wt, mpg, main = "중량-연비 그래프",
xlab = "중량", ylab = "연비", col = "red", pch = 19 )
wt <- mtcars$wt
mpg <- mtcars$mpg
plot( wt, mpg, main = "중량-연비 그래프",
xlab = "중량", ylab = "연비", col = "red", pch = 19 )
plot( mtcars$wt, mtcars$mpg,
main = "중량-연비 그래프",
xlab = "중량", ylab = "연비",
col = "red", pch = 19 )
plot( mtcars[,c("wt","mpg")],
main = "중량-연비 그래프",
xlab = "중량", ylab = "연비",
col = "red", pch = 19 )
plot( mpg~wt, data = mtcars,
main = "중량-연비 그래프",
xlab = "중량", ylab = "연비",
col = "red", pch = 19 )
# 여러 변수들 간의 산점도
vars <- c("mpg", "disp", "drat", "wt" )
target <- mtcars[ ,vars ]
head(target)
pairs( target, main = "multi plots")
vars
head(target)
do <- read.csv(file = "D:/workR/project/data/domestic_shopping_place.csv")
do
do <- read.csv(file = "D:/workR/project/data/market_info.csv")
#
#
# 문제 3번)
# 제주 전통시장 현황을 분석한다. - 관광산업과 시너지는?
#
#
setwd("D:/workR/project/data")
do <- read.csv(file = "D:/workR/project/data/market_info.csv")
do <- read.csv(file = "D:/workR/project/data/market_info.csv")
do
market <- read.csv(file = "D:/workR/project/data/market_info.csv")
market
rm(do)
domestic <- read.csv(file = "D:/workR/project/data/domestic_visitor.csv")
domestic
foreigner <- read.csv(file = "D:/workR/project/data/foreginer_info.csv")
foreigner
foreigner <- read.csv(file = "D:/workR/project/data/foreginer_visitor.csv")
foreigner
dofo <- merge( domestic, foreigner, by = c("year") )
dofo
View(dofo)
market
dofo
sum( dofo$visitor.x, dofo$visitor.y )
dofo[ year == 16]
dofo[ dofo$year == 2016 ]
dofo %>%
filter( year == 16)
dofo <- merge( domestic, foreigner, all = T )
dofo
domestic
foreigner
dofo <- merge( domestic, foreigner, by = c("year") )
dofo
subset( dofo, year == 2016 )
subset( dofo[,c(3,5)], year == 2016 )
subset( dofo['year',c(3,5)], )
subset( dofo[ , 3 ], year == 2016 )
subset( dofo, year == 2016 )
class(dofo)
subset( dofo, c(dofo$v_market.x,dofo$v_market.y) )
subset( dofo, select = c(dofo$v_market.x,dofo$v_market.y) )
subset( dofo, select = c("v_market.x","v_market.y") )
dofos <- subset( dofo, select = c("v_market.x","v_market.y") ) #2016
sum( dofos[1:2] )
sum( dofos[1:1] )
sum( dofos[1,.1], dofos[1,2] )
sum( dofos[1,1], dofos[1,2] )
market
market <- read.csv(file = "D:/workR/project/data/market_info.csv")
market <- market
market
domestic <- read.csv(file = "D:/workR/project/data/domestic_visitor.csv")
domestic
foreigner <- read.csv(file = "D:/workR/project/data/foreginer_visitor.csv")
foreigner
dofo <- merge( domestic, foreigner, by = c("year") )
class(dofo)
dofo
dofos <- subset( dofo, select = c("v_market.x","v_market.y") ) #2016
dofos
dofov15 <- sum( dofos[1,1], dofos[1,2] )
dofov15
dofov15 <- sum( dofos[1,1], dofos[1,2] );       dofov15
dofov16 <- sum( dofos[2,1], dofos[2,2] );       dofov16
dofov17 <- sum( dofos[3,1], dofos[3,2] );       dofov17
market
dongmun <- market[1,c(4,5,6)];      dongmun
dongmun <- market[1,c(5,6,7)];      dongmun
hanlim <- market[2,c(5,6,7)];       hanlim
seongsan <- market[3,c(5,6,7)];     seongsan
daejung <- market[4,c(5,6,7)];      daejung
# 1) 2015년 ~ 2017년도 : (해당 시장 방문자 수) / (내/외국인들 전통시장 방문자 수)
dongmun$Visit.15 / dofov15
# 1) 2015년 ~ 2017년도 : (해당 시장 방문자 수) / (내/외국인들 전통시장 방문자 수)
dongmun$Visit.15 / dofov15 * 100
hanlim$Visit.15 / dofov15 * 100
seongsan$Visit.15 / dofov15 * 100
daejung$Visit.15 / dofov15 * 100
ohlle$Visit.15 / dofov15 * 100
ohlle <- market[5,c(5,6,7)];        ohlle
ohlle$Visit.15 / dofov15 * 100
# 1) 2015년 ~ 2017년도 : (해당 시장 방문자 수) / (내/외국인들 전통시장 방문자 수)
dongmun$Visit.15  / dofov15 * 100
hanlim$Visit.15   / dofov15 * 100
seongsan$Visit.15 / dofov15 * 100
daejung$Visit.15  / dofov15 * 100
ohlle$Visit.15    / dofov15 * 100
# 2016년
dongmun$Visit.16  / dofov16 * 100 # 126.0306 (%)
hanlim$Visit.16   / dofov16 * 100 # 22.37927 (%)
seongsan$Visit.16 / dofov16 * 100 # 2.944641 (%)
daejung$Visit.16  / dofov16 * 100 # 121.3192 (%)
ohlle$Visit.16    / dofov16 * 100 # 807.4205 (%)
ohlle <- market[5,c(5,6,7)];        ohlle
market
# 2016년
dongmun$Visit.16  / dofov16 * 100 # 126.0306 (%)
hanlim$Visit.16   / dofov16 * 100 # 22.37927 (%)
seongsan$Visit.16 / dofov16 * 100 # 2.944641 (%)
daejung$Visit.16  / dofov16 * 100 # 121.3192 (%)
ohlle$Visit.16    / dofov16 * 100 # 807.4205 (%)
